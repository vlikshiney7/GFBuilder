package fr.vlik.grandfantasia.loader;

import java.util.HashMap;

import fr.vlik.grandfantasia.Archive;
import fr.vlik.grandfantasia.Bullet;
import fr.vlik.grandfantasia.CombiTalent;
import fr.vlik.grandfantasia.Energy;
import fr.vlik.grandfantasia.EquipSet;
import fr.vlik.grandfantasia.Fortification;
import fr.vlik.grandfantasia.Grade;
import fr.vlik.grandfantasia.Grade.GradeName;
import fr.vlik.grandfantasia.Nucleus;
import fr.vlik.grandfantasia.Pearl;
import fr.vlik.grandfantasia.ProSkill;
import fr.vlik.grandfantasia.RedFortification;
import fr.vlik.grandfantasia.Reinca;
import fr.vlik.grandfantasia.Runway;
import fr.vlik.grandfantasia.Speciality;
import fr.vlik.grandfantasia.Talent;
import fr.vlik.grandfantasia.Title;
import fr.vlik.grandfantasia.Yggdrasil;
import fr.vlik.grandfantasia.enums.Language;
import fr.vlik.grandfantasia.enums.Quality;
import fr.vlik.grandfantasia.enums.TypeEffect;
import fr.vlik.grandfantasia.enums.TypeStaticEffect;
import fr.vlik.grandfantasia.equipable.Anima;
import fr.vlik.grandfantasia.equipable.Armor;
import fr.vlik.grandfantasia.equipable.Bague;
import fr.vlik.grandfantasia.equipable.Cape;
import fr.vlik.grandfantasia.equipable.Ring;
import fr.vlik.grandfantasia.equipable.Weapon;
import fr.vlik.grandfantasia.stats.Calculable;
import fr.vlik.grandfantasia.stats.Effect;
import fr.vlik.grandfantasia.stats.Proc;
import fr.vlik.grandfantasia.stats.Proc.Activation;
import fr.vlik.grandfantasia.stats.RegenEffect;
import fr.vlik.grandfantasia.stats.RegenEffect.TypeRegen;
import fr.vlik.grandfantasia.stats.StaticEffect;

@SuppressWarnings("serial")
public class Loader {
	
	public static int[][][] getBase() {
		return new int[][][] {
			new int[][] {
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 69, 71, 74, 77, 79, 82, 85, 87, 90, 93, 95, 98, 101, 103, 106, 109, 111, 114, 117, 119, 122, 125, 127, 130, 133, 135, 138, 141, 143, 146, 149, 151, 154, 157, 159, 162, 165, 167, 170, 173, 175, 178, 181, 183, 186, 189, 191, 194, 197, 199, 202, 205, 207, 210, 213, 215, 218, 221, 223, 226, 229, 231, 234, 237, 239, 242, 245, 247, 250, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 68, 70, 72, 74, 77, 79, 81, 83, 85, 88, 90, 92, 94, 96, 99, 101, 103, 105, 107, 110, 112, 114, 116, 118, 121, 123, 125, 127, 129, 132, 134, 136, 138, 140, 143, 145, 147, 149, 151, 154, 156, 158, 160, 162, 165, 167, 169, 171, 173, 176, 178, 180, 182, 184, 187, 189, 191, 193, 195, 198, 200, 202, 204, 206, 209, 211, 213, 215, 217, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 56, 58, 60, 62, 64, 67, 69, 71, 73, 75, 78, 80, 82, 84, 86, 89, 91, 93, 95, 97, 100, 102, 104, 106, 108, 111, 113, 115, 117, 119, 122, 124, 126, 128, 130, 133, 135, 137, 139, 141, 144, 146, 148, 150, 152, 155, 157, 159, 161, 163, 166, 168, 170, 172, 174, 177, 179, 181, 183, 185, 188, 190, 192, 194, 196, 199, 201, 203, 205, 207, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 78, 81, 83, 86, 88, 91, 93, 96, 98, 101, 103, 106, 108, 111, 113, 116, 118, 121, 123, 126, 128, 131, 133, 136, 138, 141, 143, 146, 148, 151, 153, 156, 158, 161, 163, 166, 168, 171, 173, 176, 178, 181, 183, 186, 188, 191, 193, 196, 198, 201, 203, 206, 208, 211, 213, 216, 218, 221, 223, 226, 228, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 35, 36, 38, 40, 41, 43, 45, 46, 48, 50, 51, 53, 55, 56, 59, 61, 63, 65, 67, 70, 72, 74, 76, 78, 81, 83, 85, 87, 89, 92, 94, 96, 98, 100, 103, 105, 107, 109, 111, 114, 116, 118, 120, 122, 125, 127, 129, 131, 133, 136, 138, 140, 142, 144, 147, 149, 151, 153, 155, 158, 160, 162, 164, 166, 169, 171, 173, 175, 177, 180, 182, 184, 186, 188, 191, 193, 195, 197, 199, 202, 204, 206, 208, 210, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 35, 36, 38, 40, 41, 43, 45, 46, 48, 50, 51, 53, 55, 56, 58, 60, 61, 63, 65, 66, 68, 70, 71, 73, 75, 76, 78, 80, 81, 83, 85, 86, 88, 90, 91, 93, 95, 96, 98, 100, 101, 103, 105, 106, 108, 110, 111, 113, 115, 116, 118, 120, 121, 123, 125, 126, 128, 130, 131, 133, 135, 136, 138, 140, 141, 143, 145, 146, 148, 150, 151, 153, 155, 156, 158, 160, 161, 163, 165, 166, 168, 170, 171, 173, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 69, 71, 74, 77, 79, 82, 85, 87, 90, 93, 95, 98, 101, 103, 106, 109, 111, 114, 117, 119, 122, 125, 127, 130, 133, 135, 138, 141, 143, 146, 149, 151, 154, 157, 159, 162, 165, 167, 170, 173, 175, 178, 181, 183, 186, 189, 191, 194, 197, 199, 202, 205, 207, 210, 213, 215, 218, 221, 223, 226, 229, 231, 234, 237, 239, 242, 245, 247, 250, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 68, 70, 72, 74, 77, 79, 81, 83, 85, 88, 90, 92, 94, 96, 99, 101, 103, 105, 107, 110, 112, 114, 116, 118, 121, 123, 125, 127, 129, 132, 134, 136, 138, 140, 143, 145, 147, 149, 151, 154, 156, 158, 160, 162, 165, 167, 169, 171, 173, 176, 178, 180, 182, 184, 187, 189, 191, 193, 195, 198, 200, 202, 204, 206, 209, 211, 213, 215, 217, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, },
			},
			new int[][] {
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 66, 69, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242, 245, 248, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 284, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 66, 69, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 168, 171, 174, 178, 181, 184, 188, 191, 194, 198, 201, 204, 208, 211, 214, 218, 221, 224, 228, 231, 234, 238, 241, 244, 248, 251, 254, 258, 261, 264, 268, 271, 274, 278, 281, 284, 288, 291, 294, 298, 301, 304, 308, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 57, 59, 61, 64, 66, 68, 71, 73, 75, 78, 80, 82, 85, 87, 89, 92, 94, 96, 99, 101, 103, 106, 108, 110, 113, 115, 117, 120, 122, 124, 127, 129, 131, 134, 136, 138, 141, 143, 145, 148, 150, 152, 155, 157, 159, 162, 164, 166, 169, 171, 173, 176, 178, 180, 183, 185, 187, 190, 192, 194, 197, 199, 201, 204, 206, 208, 211, 213, 215, 218, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 38, 40, 42, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 61, 63, 65, 68, 70, 72, 75, 77, 79, 82, 84, 86, 89, 91, 93, 96, 98, 100, 103, 105, 107, 110, 112, 114, 117, 119, 121, 124, 126, 128, 131, 133, 135, 138, 140, 142, 145, 147, 149, 152, 154, 156, 159, 161, 163, 166, 168, 170, 173, 175, 177, 180, 182, 184, 187, 189, 191, 194, 196, 198, 201, 203, 205, 208, 210, 212, 215, 217, 219, 222, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 33, 35, 37, 38, 40, 42, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 61, 63, 65, 67, 69, 72, 74, 76, 78, 80, 83, 85, 87, 89, 91, 94, 96, 98, 100, 102, 105, 107, 109, 111, 113, 116, 118, 120, 122, 124, 127, 129, 131, 133, 135, 138, 140, 142, 144, 146, 149, 151, 153, 155, 157, 160, 162, 164, 166, 168, 171, 173, 175, 177, 179, 182, 184, 186, 188, 190, 193, 195, 197, 199, 201, 204, 206, 208, 210, 212, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 49, 51, 52, 54, 56, 58, 59, 61, 63, 65, 66, 68, 70, 72, 73, 75, 77, 79, 80, 82, 84, 86, 87, 89, 91, 93, 94, 96, 98, 100, 101, 103, 105, 107, 108, 110, 112, 114, 115, 117, 119, 121, 122, 124, 126, 128, 129, 131, 133, 135, 136, 138, 140, 142, 143, 145, 147, 149, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 66, 69, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242, 245, 248, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 284, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 66, 69, 71, 74, 77, 79, 81, 84, 86, 88, 91, 93, 95, 98, 100, 102, 105, 107, 109, 112, 114, 116, 119, 121, 123, 126, 128, 130, 133, 135, 137, 140, 142, 144, 147, 149, 151, 154, 156, 158, 161, 163, 165, 168, 170, 172, 175, 177, 179, 182, 184, 186, 189, 191, 193, 196, 198, 200, 203, 205, 207, 210, 212, 214, 217, 219, 221, 224, 226, 228, 231, 233, 235, 238, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 49, 51, 52, 54, 56, 58, 59, 61, 63, 65, 66, 68, 70, 72, 73, 75, 77, 79, 80, 82, 84, 86, 87, 89, 91, 93, 94, 96, 98, 100, 101, 103, 105, 107, 108, 110, 112, 114, 115, 117, 119, 121, 122, 124, 126, 128, 129, 131, 133, 135, 136, 138, 140, 142, 143, 145, 147, 149, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, },
			},
			new int[][] {
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148, 149, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148, 149, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 38, 39, 41, 43, 44, 46, 48, 49, 51, 53, 54, 56, 58, 59, 61, 63, 64, 66, 68, 69, 71, 73, 74, 76, 78, 79, 81, 83, 84, 86, 88, 89, 91, 93, 94, 96, 98, 99, 101, 103, 104, 106, 108, 109, 111, 113, 114, 116, 118, 119, 121, 123, 124, 126, 128, 129, 131, 133, 134, 136, 138, 139, 141, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158, 159, 161, 163, 164, 166, 168, 169, 171, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 38, 39, 41, 43, 44, 46, 48, 49, 51, 53, 54, 57, 59, 61, 64, 66, 68, 71, 73, 75, 78, 80, 82, 85, 87, 89, 92, 94, 96, 99, 101, 103, 106, 108, 110, 113, 115, 117, 120, 122, 124, 127, 129, 131, 134, 136, 138, 141, 143, 145, 148, 150, 152, 155, 157, 159, 162, 164, 166, 169, 171, 173, 176, 178, 180, 183, 185, 187, 190, 192, 194, 197, 199, 201, 204, 206, 208, 211, 213, 215, 218, },
				new int[] { 10, 11, 12, 13, 14, 17, 19, 21, 24, 26, 28, 31, 33, 35, 38, 41, 43, 46, 48, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 80, 83, 87, 90, 94, 97, 101, 104, 108, 111, 115, 118, 122, 125, 129, 132, 136, 139, 143, 146, 150, 153, 157, 160, 164, 167, 171, 174, 178, 181, 185, 188, 192, 195, 199, 202, 206, 209, 213, 216, 220, 223, 227, 230, 234, 237, 241, 244, 248, 251, 255, 258, 262, 265, 269, 272, 276, 279, 283, 286, 290, 293, 297, 300, 304, 307, 311, 314, 318, 321, },
				new int[] { 10, 11, 12, 13, 14, 17, 19, 21, 24, 26, 28, 31, 33, 35, 38, 41, 43, 46, 48, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, },
				new int[] { 10, 11, 12, 13, 14, 17, 19, 21, 24, 26, 28, 31, 33, 35, 38, 41, 43, 46, 48, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, },
				new int[] { 10, 11, 12, 13, 14, 17, 19, 21, 24, 26, 28, 31, 33, 35, 38, 41, 43, 46, 48, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 80, 83, 87, 90, 94, 97, 101, 104, 108, 111, 115, 118, 122, 125, 129, 132, 136, 139, 143, 146, 150, 153, 157, 160, 164, 167, 171, 174, 178, 181, 185, 188, 192, 195, 199, 202, 206, 209, 213, 216, 220, 223, 227, 230, 234, 237, 241, 244, 248, 251, 255, 258, 262, 265, 269, 272, 276, 279, 283, 286, 290, 293, 297, 300, 304, 307, 311, 314, 318, 321, },
			},
			new int[][] {
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 129, 130, 131, 133, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 136, 138, 139, 140, 142, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 67, 69, 72, 75, 77, 80, 83, 85, 88, 91, 93, 96, 99, 101, 104, 107, 109, 112, 115, 117, 120, 123, 125, 128, 131, 133, 136, 139, 141, 144, 147, 149, 152, 155, 157, 160, 163, 165, 168, 171, 173, 176, 179, 181, 184, 187, 189, 192, 195, 197, 200, 203, 205, 208, 211, 213, 216, 219, 221, 224, 227, 229, 232, 235, 237, 240, 243, 245, 248, },
				new int[] { 10, 11, 12, 13, 14, 16, 17, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 66, 68, 71, 73, 75, 78, 80, 82, 85, 87, 89, 92, 94, 96, 99, 101, 103, 106, 108, 110, 113, 115, 117, 120, 122, 124, 127, 129, 131, 134, 136, 138, 141, 143, 145, 148, 150, 152, 155, 157, 159, 162, 164, 166, 169, 171, 173, 176, 178, 180, 183, 185, 187, 190, 192, 194, 197, 199, 201, 204, 206, 208, 211, 213, 215, 218, 220, 222, 225, },
				new int[] { 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 66, 69, 71, 74, 76, 79, 81, 84, 86, 89, 91, 94, 96, 99, 101, 104, 106, 109, 111, 114, 116, 119, 121, 124, 126, 129, 131, 134, 136, 139, 141, 144, 146, 149, 151, 154, 156, 159, 161, 164, 166, 169, 171, 174, 176, 179, 181, 184, 186, 189, 191, 194, 196, 199, 201, 204, 206, 209, 211, 214, 216, 219, 221, 224, 226, 229, 231, 234, 236, },
				new int[] { 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 66, 68, 70, 73, 75, 77, 79, 82, 84, 86, 88, 91, 93, 95, 97, 100, 102, 104, 106, 109, 111, 113, 115, 118, 120, 122, 124, 127, 129, 131, 133, 136, 138, 140, 142, 145, 147, 149, 151, 154, 156, 158, 160, 163, 165, 167, 169, 172, 174, 176, 178, 181, 183, 185, 187, 190, 192, 194, 196, 199, 201, 203, 205, 208, 210, 212, 214, 217, 219, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 129, 130, 131, 133, },
				new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, },
				new int[] { 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 66, 68, 70, 73, 75, 77, 79, 82, 84, 86, 88, 91, 93, 95, 97, 100, 102, 104, 106, 109, 111, 113, 115, 118, 120, 122, 124, 127, 129, 131, 133, 136, 138, 140, 142, 145, 147, 149, 151, 154, 156, 158, 160, 163, 165, 167, 169, 172, 174, 176, 178, 181, 183, 185, 187, 190, 192, 194, 196, 199, 201, 203, 205, 208, 210, 212, 214, 217, 219, },
				new int[] { 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 64, 66, 69, 71, 74, 76, 79, 81, 84, 86, 89, 91, 94, 96, 99, 101, 104, 106, 109, 111, 114, 116, 119, 121, 124, 126, 129, 131, 134, 136, 139, 141, 144, 146, 149, 151, 154, 156, 159, 161, 164, 166, 169, 171, 174, 176, 179, 181, 184, 186, 189, 191, 194, 196, 199, 201, 204, 206, 209, 211, 214, 216, 219, 221, 224, 226, 229, 231, 234, 236, },
			},
			new int[][] {
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 43, 46, 48, 50, 53, 55, 57, 60, 62, 64, 67, 69, 71, 74, 76, 79, 81, 84, 86, 89, 91, 94, 96, 99, 101, 104, 106, 109, 111, 114, 116, 119, 121, 124, 126, 129, 131, 134, 136, 139, 141, 144, 146, 149, 151, 154, 156, 159, 161, 164, 166, 169, 171, 174, 176, 179, 181, 184, 186, 189, 191, 194, 196, 199, 201, 204, 206, 209, 211, 214, 216, 219, 221, 224, 226, 229, 231, 234, 236, 239, 241, 244, 246, },
				new int[] { 10, 12, 13, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 39, 41, 43, 46, 48, 50, 53, 55, 57, 60, 62, 64, 67, 69, 71, 74, 77, 79, 82, 85, 87, 90, 93, 95, 98, 101, 103, 106, 109, 111, 114, 117, 119, 122, 125, 127, 130, 133, 135, 138, 141, 143, 146, 149, 151, 154, 157, 159, 162, 165, 167, 170, 173, 175, 178, 181, 183, 186, 189, 191, 194, 197, 199, 202, 205, 207, 210, 213, 215, 218, 221, 223, 226, 229, 231, 234, 237, 239, 242, 245, 247, 250, 253, 255, 258, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 144, 145, 147, 148, 150, 151, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 144, 145, 147, 148, 150, 151, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, },
				new int[] { 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 57, 59, 62, 64, 67, 69, 72, 74, 77, 79, 82, 84, 87, 89, 92, 94, 97, 99, 102, 104, 107, 109, 112, 114, 117, 119, 122, 124, 127, 129, 132, 134, 137, 139, 142, 144, 147, 149, 152, 154, 157, 159, 162, 164, 167, 169, 172, 174, 177, 179, 182, 184, 187, 189, 192, 194, 197, 199, 202, 204, 207, 209, 212, 214, 217, 219, 222, 224, 227, 229, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 144, 145, 147, 148, 150, 151, },
				new int[] { 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, },
			},
		};
	}
	
	public static Grade[] getGrade() {
		return new Grade[] {
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Novice"); put(Language.EN, "Novice"); }},
				GradeName.BERSERKER, 0, 5, "novice"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Combattant"); put(Language.EN, "Fighter"); }},
				GradeName.BERSERKER, 6, 15, "0-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Chasseur"); put(Language.EN, "Hunter"); }},
				GradeName.RANGER, 6, 15, "0-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Acolyte"); put(Language.EN, "Acolyte"); }},
				GradeName.CLERC, 6, 15, "0-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Ensorceleur"); put(Language.EN, "Spellcaster"); }},
				GradeName.SORCIER, 6, 15, "0-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Mécanicien"); put(Language.EN, "Mechanic"); }},
				GradeName.METALLEUX, 6, 15, "0-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Voyageur"); put(Language.EN, "Wanderer"); }},
				GradeName.SPATIODERIVEUR, 6, 15, "0-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Guerrier"); put(Language.EN, "Warrior"); }},
				GradeName.BERSERKER, 16, 30, "1-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Archer"); put(Language.EN, "Archer"); }},
				GradeName.RANGER, 16, 30, "1-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Prêtre"); put(Language.EN, "Priest"); }},
				GradeName.CLERC, 16, 30, "1-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Magicien"); put(Language.EN, "Mage"); }},
				GradeName.SORCIER, 16, 30, "1-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Machiniste"); put(Language.EN, "Machinist"); }},
				GradeName.METALLEUX, 16, 30, "1-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Explorateur"); put(Language.EN, "Drifter"); }},
				GradeName.SPATIODERIVEUR, 16, 30, "1-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Berserker"); put(Language.EN, "Berserker"); }},
				GradeName.BERSERKER, 31, 65, "2-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Paladin"); put(Language.EN, "Paladin"); }},
				GradeName.PALADIN, 31, 65, "2-1"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Ranger"); put(Language.EN, "Ranger"); }},
				GradeName.RANGER, 31, 65, "2-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Assassin"); put(Language.EN, "Assassin"); }},
				GradeName.ASSASSIN, 31, 65, "2-3"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Clerc"); put(Language.EN, "Cleric"); }},
				GradeName.CLERC, 31, 65, "2-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Sage"); put(Language.EN, "Sage"); }},
				GradeName.SAGE, 31, 65, "2-5"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Sorcier"); put(Language.EN, "Wizard"); }},
				GradeName.SORCIER, 31, 65, "2-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Nécromancien"); put(Language.EN, "Necromancer"); }},
				GradeName.NECROMANCIEN, 31, 65, "2-7"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Métalleux"); put(Language.EN, "Engineer"); }},
				GradeName.METALLEUX, 31, 65, "2-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Démolisseur"); put(Language.EN, "Demolitionist"); }},
				GradeName.DEMOLISSEUR, 31, 65, "2-9"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Spatiodériveur"); put(Language.EN, "Void Runner"); }},
				GradeName.SPATIODERIVEUR, 31, 65, "2-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Chronodériveur"); put(Language.EN, "Time Traveler"); }},
				GradeName.CHRONODERIVEUR, 31, 65, "2-11"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Gladiateur"); put(Language.EN, "Warlord"); }},
				GradeName.BERSERKER, 66, 85, "3-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Vindicateur"); put(Language.EN, "Templar"); }},
				GradeName.PALADIN, 66, 85, "3-1"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Traqueur"); put(Language.EN, "Sharpshooter"); }},
				GradeName.RANGER, 66, 85, "3-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Ninja"); put(Language.EN, "Darkstalker"); }},
				GradeName.ASSASSIN, 66, 85, "3-3"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Rédempteur"); put(Language.EN, "Prophet"); }},
				GradeName.CLERC, 66, 85, "3-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Oracle"); put(Language.EN, "Mystic"); }},
				GradeName.SAGE, 66, 85, "3-5"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Archimage"); put(Language.EN, "Archmage"); }},
				GradeName.SORCIER, 66, 85, "3-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Démoniste"); put(Language.EN, "Demonologist"); }},
				GradeName.NECROMANCIEN, 66, 85, "3-7"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Prime"); put(Language.EN, "Gearmaster"); }},
				GradeName.METALLEUX, 66, 85, "3-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Optimus"); put(Language.EN, "Gunner"); }},
				GradeName.DEMOLISSEUR, 66, 85, "3-9"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Ronin"); put(Language.EN, "Dimensionalist"); }},
				GradeName.SPATIODERIVEUR, 66, 85, "3-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Horloger"); put(Language.EN, "Key master"); }},
				GradeName.CHRONODERIVEUR, 66, 85, "3-11"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Ravageur"); put(Language.EN, "Deathknight"); }},
				GradeName.BERSERKER, 86, 90, "4-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Templier"); put(Language.EN, "Crusader"); }},
				GradeName.PALADIN, 86, 90, "4-1"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Sniper"); put(Language.EN, "Hawkeye"); }},
				GradeName.RANGER, 86, 90, "4-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Shinobi"); put(Language.EN, "Windshadow"); }},
				GradeName.ASSASSIN, 86, 90, "4-3"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Exorciste"); put(Language.EN, "Saint"); }},
				GradeName.CLERC, 86, 90, "4-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Shaman"); put(Language.EN, "Shaman"); }},
				GradeName.SAGE, 86, 90, "4-5"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Avatar"); put(Language.EN, "Avatar"); }},
				GradeName.SORCIER, 86, 90, "4-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Shinigami"); put(Language.EN, "Shadowlord"); }},
				GradeName.NECROMANCIEN, 86, 90, "4-7"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Mégatron"); put(Language.EN, "Cogmaster"); }},
				GradeName.METALLEUX, 86, 90, "4-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Galvatron"); put(Language.EN, "Bombardier"); }},
				GradeName.DEMOLISSEUR, 86, 90, "4-9"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Occultiste"); put(Language.EN, "Reaper"); }},
				GradeName.SPATIODERIVEUR, 86, 90, "4-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Augure"); put(Language.EN, "Chronomancer"); }},
				GradeName.CHRONODERIVEUR, 86, 90, "4-11"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Destructeur"); put(Language.EN, "Destroyer"); }},
				GradeName.BERSERKER, 91, 100, "5-0"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Croisé"); put(Language.EN, "Holy Knight"); }},
				GradeName.PALADIN, 91, 100, "5-1"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Prédateur"); put(Language.EN, "Predator"); }},
				GradeName.RANGER, 91, 100, "5-2"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Kage"); put(Language.EN, "Shinobi"); }},
				GradeName.ASSASSIN, 91, 100, "5-3"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Archange"); put(Language.EN, "Archangel"); }},
				GradeName.CLERC, 91, 100, "5-4"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Druide"); put(Language.EN, "Druid"); }},
				GradeName.SAGE, 91, 100, "5-5"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Arcaniste"); put(Language.EN, "Warlock"); }},
				GradeName.SORCIER, 91, 100, "5-6"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Faucheur"); put(Language.EN, "Shinigami"); }},
				GradeName.NECROMANCIEN, 91, 100, "5-7"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Oméga"); put(Language.EN, "Mechmaster"); }},
				GradeName.METALLEUX, 91, 100, "5-8"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Suprême"); put(Language.EN, "Artillerist"); }},
				GradeName.DEMOLISSEUR, 91, 100, "5-9"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Dimensionaliste"); put(Language.EN, "Phantom"); }},
				GradeName.SPATIODERIVEUR, 91, 100, "5-10"),
			new Grade(new HashMap<Language, String>() {{ put(Language.FR, "Chronomancien"); put(Language.EN, "Chronoshifter"); }},
				GradeName.CHRONODERIVEUR, 91, 100, "5-11"),
		};
	}
	
	public static Reinca[] getReinca() {
		return new Reinca[] {
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Aucun"); put(Language.EN, "None"); }}, 1, 1, 100, 0, "none"),
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Niveau 1 - Éval 1"); put(Language.EN, "Level 1 - Eval 1"); }}, 1.045, 1, 65, 1, "lvl1"),
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Niveau 1 - Éval 2"); put(Language.EN, "Level 1 - Eval 2"); }}, 1.08, 66, 85, 1, "lvl1"),
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Niveau 1 - Éval 3"); put(Language.EN, "Level 1 - Eval 3"); }}, 1.12, 86, 90, 1, "lvl1"),
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Niveau 1 - Éval 4"); put(Language.EN, "Level 1 - Eval 4"); }}, 1.16, 91, 99, 1, "lvl1"),
			new Reinca(new HashMap<Language, String>() {{ put(Language.FR, "Niveau 1 - Éval 5"); put(Language.EN, "Level 1 - Eval 5"); }}, 1.2, 100, 100, 1, "lvl1")
		};
	}
	
	public static Yggdrasil[] getYggdrasil() {
		return new Yggdrasil[] {
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "0 - Aucun"); put(Language.EN, "0 - None"); }}, "null", null),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "1 - Alice"); put(Language.EN, "1 - Alice"); }}, "boss1", new Effect[] {
				new Effect(TypeEffect.FCE, false, 15),
				new Effect(TypeEffect.VIT, false, 15),
				new Effect(TypeEffect.INT, false, 15),
				new Effect(TypeEffect.VOL, false, 15),
				new Effect(TypeEffect.AGI, false, 15),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "2 - Ronto"); put(Language.EN, "2 - Ronto"); }}, "boss2", new Effect[] {
				new Effect(TypeEffect.FCE, false, 15),
				new Effect(TypeEffect.VIT, false, 15),
				new Effect(TypeEffect.INT, false, 15),
				new Effect(TypeEffect.VOL, false, 15),
				new Effect(TypeEffect.AGI, false, 15),
				new Effect(TypeEffect.XP, false, 5),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "3 - Bodor"); put(Language.EN, "3 - Bodor"); }}, "boss3", new Effect[] {
				new Effect(TypeEffect.FCE, false, 15),
				new Effect(TypeEffect.VIT, false, 15),
				new Effect(TypeEffect.INT, false, 15),
				new Effect(TypeEffect.VOL, false, 15),
				new Effect(TypeEffect.AGI, false, 15),
				new Effect(TypeEffect.XP, false, 5),
				new Effect(TypeEffect.DegP, false, 3),
				new Effect(TypeEffect.DegM, false, 3),
				new Effect(TypeEffect.PeneP, false, 3),
				new Effect(TypeEffect.PeneM, false, 3),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "4 - Smulca"); put(Language.EN, "4 - Smulca"); }}, "boss4", new Effect[] {
				new Effect(TypeEffect.FCE, true, 5),
				new Effect(TypeEffect.VIT, true, 5),
				new Effect(TypeEffect.INT, true, 5),
				new Effect(TypeEffect.VOL, true, 5),
				new Effect(TypeEffect.AGI, true, 5),
				new Effect(TypeEffect.XP, false, 5),
				new Effect(TypeEffect.DegP, false, 3),
				new Effect(TypeEffect.DegM, false, 3),
				new Effect(TypeEffect.PeneP, false, 3),
				new Effect(TypeEffect.PeneM, false, 3),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "5 - Ewan"); put(Language.EN, "5 - Ewan"); }}, "boss5", new Effect[] {
				new Effect(TypeEffect.FCE, true, 5),
				new Effect(TypeEffect.VIT, true, 5),
				new Effect(TypeEffect.INT, true, 5),
				new Effect(TypeEffect.VOL, true, 5),
				new Effect(TypeEffect.AGI, true, 5),
				new Effect(TypeEffect.XP, false, 8),
				new Effect(TypeEffect.DegP, false, 3),
				new Effect(TypeEffect.DegM, false, 3),
				new Effect(TypeEffect.PeneP, false, 3),
				new Effect(TypeEffect.PeneM, false, 3),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "6 - Bahadolo"); put(Language.EN, "6 - Bahadolo"); }}, "boss6", new Effect[] {
				new Effect(TypeEffect.FCE, true, 5),
				new Effect(TypeEffect.VIT, true, 5),
				new Effect(TypeEffect.INT, true, 5),
				new Effect(TypeEffect.VOL, true, 5),
				new Effect(TypeEffect.AGI, true, 5),
				new Effect(TypeEffect.XP, false, 8),
				new Effect(TypeEffect.DegP, false, 5),
				new Effect(TypeEffect.DegM, false, 5),
				new Effect(TypeEffect.PeneP, false, 5),
				new Effect(TypeEffect.PeneM, false, 5),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "7 - Quill"); put(Language.EN, "7 - Quill"); }}, "boss7", new Effect[] {
				new Effect(TypeEffect.FCE, true, 10),
				new Effect(TypeEffect.VIT, true, 10),
				new Effect(TypeEffect.INT, true, 10),
				new Effect(TypeEffect.VOL, true, 10),
				new Effect(TypeEffect.AGI, true, 10),
				new Effect(TypeEffect.XP, false, 8),
				new Effect(TypeEffect.DegP, false, 5),
				new Effect(TypeEffect.DegM, false, 5),
				new Effect(TypeEffect.PeneP, false, 5),
				new Effect(TypeEffect.PeneM, false, 5),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "8 - Mosunk"); put(Language.EN, "8 - Mosunk"); }}, "boss8", new Effect[] {
				new Effect(TypeEffect.FCE, true, 10),
				new Effect(TypeEffect.VIT, true, 10),
				new Effect(TypeEffect.INT, true, 10),
				new Effect(TypeEffect.VOL, true, 10),
				new Effect(TypeEffect.AGI, true, 10),
				new Effect(TypeEffect.XP, false, 11),
				new Effect(TypeEffect.DegP, false, 5),
				new Effect(TypeEffect.DegM, false, 5),
				new Effect(TypeEffect.PeneP, false, 5),
				new Effect(TypeEffect.PeneM, false, 5),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "9 - Jundo"); put(Language.EN, "9 - Jundo"); }}, "boss9", new Effect[] {
					new Effect(TypeEffect.FCE, true, 10),
					new Effect(TypeEffect.VIT, true, 10),
					new Effect(TypeEffect.INT, true, 10),
					new Effect(TypeEffect.VOL, true, 10),
					new Effect(TypeEffect.AGI, true, 10),
					new Effect(TypeEffect.XP, false, 11),
					new Effect(TypeEffect.DegP, false, 7),
					new Effect(TypeEffect.DegM, false, 7),
					new Effect(TypeEffect.PeneP, false, 7),
					new Effect(TypeEffect.PeneM, false, 7),
			}),
			new Yggdrasil(new HashMap<Language, String>() {{ put(Language.FR, "10 - Siropas"); put(Language.EN, "10 - Siropas"); }}, "boss10", new Effect[] {
					new Effect(TypeEffect.FCE, true, 15),
					new Effect(TypeEffect.VIT, true, 15),
					new Effect(TypeEffect.INT, true, 15),
					new Effect(TypeEffect.VOL, true, 15),
					new Effect(TypeEffect.AGI, true, 15),
					new Effect(TypeEffect.XP, false, 11),
					new Effect(TypeEffect.DegP, false, 7),
					new Effect(TypeEffect.DegM, false, 7),
					new Effect(TypeEffect.PeneP, false, 7),
					new Effect(TypeEffect.PeneM, false, 7),
			})
		};
	}
	
	public static Title[] getTitle() {
		return LoaderTitle.getTitle();
	}
	
	public static Archive[] getArchive() {
		return new Archive[] {
			new Archive("Rien", Quality.GREY, null),
			new Archive("Architecte Débutant", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.PV, false, 432),
				new Effect(TypeEffect.PM, false, 180),
			}),
			new Archive("Architecte Amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.PV, false, 864),
				new Effect(TypeEffect.PM, false, 360),
			}),
			new Archive("Architecte Confirmé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.PV, false, 1296),
				new Effect(TypeEffect.PM, false, 540),
			}),
			new Archive("Décorateur Professionnel de l'Île", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 1728),
				new Effect(TypeEffect.PM, false, 720),
			}),
			new Archive("Artiste de l'Île", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 2160),
				new Effect(TypeEffect.PM, false, 900),
			}),
			new Archive("Artiste de l'Île - Superstar", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 2592),
				new Effect(TypeEffect.PM, false, 1080),
			}),
			new Archive("Artiste de l'Île - Expert", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3024),
				new Effect(TypeEffect.PM, false, 1260),
			}),
			new Archive("Artiste de l'Île - Talentueux", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3456),
				new Effect(TypeEffect.PM, false, 1440),
			}),
			new Archive("Artiste de l'Île - Chef", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3888),
				new Effect(TypeEffect.PM, false, 1620),
			}),
			new Archive("Artiste de l'Île - Maître", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.PV, false, 4320),
				new Effect(TypeEffect.PM, false, 1800),
			}),
			new Archive("Top-Model Débutant", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 234),
				new Effect(TypeEffect.AtkD, false, 180),
				new Effect(TypeEffect.AtkM, false, 180),
			}),
			new Archive("Top-Model Amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.Atk, false, 468),
				new Effect(TypeEffect.AtkD, false, 360),
				new Effect(TypeEffect.AtkM, false, 360),
			}),
			new Archive("Top-Model Confirmé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.Atk, false, 702),
				new Effect(TypeEffect.AtkD, false, 540),
				new Effect(TypeEffect.AtkM, false, 540),
			}),
			new Archive("Organisateur Professionnel", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 936),
				new Effect(TypeEffect.AtkD, false, 720),
				new Effect(TypeEffect.AtkM, false, 720),
			}),
			new Archive("Organisateur", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 1170),
				new Effect(TypeEffect.AtkD, false, 900),
				new Effect(TypeEffect.AtkM, false, 900),
			}),
			new Archive("Organisateur - Superstar", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 1404),
				new Effect(TypeEffect.AtkD, false, 1080),
				new Effect(TypeEffect.AtkM, false, 1080),
			}),
			new Archive("Organisateur - Expert", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 1638),
				new Effect(TypeEffect.AtkD, false, 1260),
				new Effect(TypeEffect.AtkM, false, 1260),
			}),
			new Archive("Organisateur - Talentueux", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 1872),
				new Effect(TypeEffect.AtkD, false, 1440),
				new Effect(TypeEffect.AtkM, false, 1440),
			}),
			new Archive("Organisateur - Chef", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Atk, false, 2106),
				new Effect(TypeEffect.AtkD, false, 1620),
				new Effect(TypeEffect.AtkM, false, 1620),
			}),
			new Archive("Organisateur - Maître", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.Atk, false, 2340),
				new Effect(TypeEffect.AtkD, false, 1800),
				new Effect(TypeEffect.AtkM, false, 1800),
			}),
			new Archive("Philatéliste Débutant", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 20),
				new Effect(TypeEffect.ESQ, false, 10),
			}),
			new Archive("Philatéliste Amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 40),
				new Effect(TypeEffect.ESQ, false, 20),
			}),
			new Archive("Philatéliste Confirmé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 60),
				new Effect(TypeEffect.ESQ, false, 30),
			}),
			new Archive("Récolteur Professionnel", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 80),
				new Effect(TypeEffect.ESQ, false, 40),
			}),
			new Archive("Collectionneur ", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 100),
				new Effect(TypeEffect.ESQ, false, 50),
			}),
			new Archive("Collectionneur - Superstar ", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 110),
				new Effect(TypeEffect.ESQ, false, 55),
				new Effect(TypeEffect.FCE, false, 5, true),
				new Effect(TypeEffect.VIT, false, 5, true),
				new Effect(TypeEffect.INT, false, 5, true),
				new Effect(TypeEffect.VOL, false, 5, true),
				new Effect(TypeEffect.AGI, false, 5, true),
			}),
			new Archive("Collectionneur - Expert ", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 120),
				new Effect(TypeEffect.ESQ, false, 60),
				new Effect(TypeEffect.FCE, false, 10, true),
				new Effect(TypeEffect.VIT, false, 10, true),
				new Effect(TypeEffect.INT, false, 10, true),
				new Effect(TypeEffect.VOL, false, 10, true),
				new Effect(TypeEffect.AGI, false, 10, true),
			}),
			new Archive("Collectionneur - Talentueux ", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 130),
				new Effect(TypeEffect.ESQ, false, 65),
				new Effect(TypeEffect.FCE, false, 15, true),
				new Effect(TypeEffect.VIT, false, 15, true),
				new Effect(TypeEffect.INT, false, 15, true),
				new Effect(TypeEffect.VOL, false, 15, true),
				new Effect(TypeEffect.AGI, false, 15, true),
			}),
			new Archive("Collectionneur - Chef ", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 140),
				new Effect(TypeEffect.ESQ, false, 70),
				new Effect(TypeEffect.FCE, false, 20, true),
				new Effect(TypeEffect.VIT, false, 20, true),
				new Effect(TypeEffect.INT, false, 20, true),
				new Effect(TypeEffect.VOL, false, 20, true),
				new Effect(TypeEffect.AGI, false, 20, true),
			}),
			new Archive("Collectionneur - Maître ", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.Toucher, false, 150),
				new Effect(TypeEffect.ESQ, false, 75),
				new Effect(TypeEffect.FCE, false, 25, true),
				new Effect(TypeEffect.VIT, false, 25, true),
				new Effect(TypeEffect.INT, false, 25, true),
				new Effect(TypeEffect.VOL, false, 25, true),
				new Effect(TypeEffect.AGI, false, 25, true),
			}),
			new Archive("Sprite Débutant", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 108),
				new Effect(TypeEffect.DefM, false, 90),
			}),
			new Archive("Sprite Amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.DefP, false, 216),
				new Effect(TypeEffect.DefM, false, 180),
			}),
			new Archive("Sprite Confirmé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.DefP, false, 324),
				new Effect(TypeEffect.DefM, false, 270),
			}),
			new Archive("Nounou Sprite Professionnelle", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 432),
				new Effect(TypeEffect.DefM, false, 360),
			}),
			new Archive("Protecteur des Sprite", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 540),
				new Effect(TypeEffect.DefM, false, 450),
			}),
			new Archive("Protecteur des Sprite - Superstar", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 648),
				new Effect(TypeEffect.DefM, false, 540),
			}),
			new Archive("Protecteur des Sprite - Expert", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 756),
				new Effect(TypeEffect.DefM, false, 630),
			}),
			new Archive("Protecteur des Sprite - Talentueux", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 864),
				new Effect(TypeEffect.DefM, false, 720),
			}),
			new Archive("Protecteur des Sprite - Chef", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DefP, false, 972),
				new Effect(TypeEffect.DefM, false, 810),
			}),
			new Archive("Protecteur des Sprite - Maître", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.DefP, false, 1080),
				new Effect(TypeEffect.DefM, false, 900),
			}),
			new Archive("Dompteur Débutant", Quality.WHITE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 2),
			}),
			new Archive("Dompteur Amateur", Quality.GREEN, new Effect[] {
					new Effect(TypeEffect.Depla, false, 4),
			}),
			new Archive("Dompteur Confirmé", Quality.GREEN, new Effect[] {
					new Effect(TypeEffect.Depla, false, 6),
			}),
			new Archive("Parking de Professionnel", Quality.BLUE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 8),
			}),
			new Archive("Parking de Luxe", Quality.BLUE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 10),
			}),
			new Archive("Chantier naval - Apprenti", Quality.BLUE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 12),
			}),
			new Archive("Chantier naval - Débutant", Quality.ORANGE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 14),
			}),
			new Archive("Chantier naval - Avancé", Quality.ORANGE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 16),
			}),
			new Archive("Chantier naval - Senior", Quality.ORANGE, new Effect[] {
					new Effect(TypeEffect.Depla, false, 18),
			}),
			new Archive("Chantier naval luxueux", Quality.GOLD, new Effect[] {
					new Effect(TypeEffect.Depla, false, 20),
			}),
			new Archive("Collectionneur Débutant", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.PV, false, 432),
				new Effect(TypeEffect.PM, false, 180),
				new Effect(TypeEffect.Atk, false, 234),
				new Effect(TypeEffect.AtkD, false, 180),
				new Effect(TypeEffect.AtkM, false, 180),
				new Effect(TypeEffect.Toucher, false, 20),
				new Effect(TypeEffect.ESQ, false, 10),
				new Effect(TypeEffect.DefP, false, 108),
				new Effect(TypeEffect.DefM, false, 90),
			}),
			new Archive("Collectionneur Amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.PV, false, 864),
				new Effect(TypeEffect.PM, false, 360),
				new Effect(TypeEffect.Atk, false, 468),
				new Effect(TypeEffect.AtkD, false, 360),
				new Effect(TypeEffect.AtkM, false, 360),
				new Effect(TypeEffect.Toucher, false, 40),
				new Effect(TypeEffect.ESQ, false, 20),
				new Effect(TypeEffect.DefP, false, 216),
				new Effect(TypeEffect.DefM, false, 180),
			}),
			new Archive("Collectionneur Confirmé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.PV, false, 1296),
				new Effect(TypeEffect.PM, false, 540),
				new Effect(TypeEffect.Atk, false, 702),
				new Effect(TypeEffect.AtkD, false, 540),
				new Effect(TypeEffect.AtkM, false, 540),
				new Effect(TypeEffect.Toucher, false, 60),
				new Effect(TypeEffect.ESQ, false, 30),
				new Effect(TypeEffect.DefP, false, 324),
				new Effect(TypeEffect.DefM, false, 270),
			}),
			new Archive("Collectionneur Professionnel", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 1728),
				new Effect(TypeEffect.PM, false, 720),
				new Effect(TypeEffect.Atk, false, 936),
				new Effect(TypeEffect.AtkD, false, 720),
				new Effect(TypeEffect.AtkM, false, 720),
				new Effect(TypeEffect.Toucher, false, 80),
				new Effect(TypeEffect.ESQ, false, 40),
				new Effect(TypeEffect.DefP, false, 432),
				new Effect(TypeEffect.DefM, false, 360),
			}),
			new Archive("Collectionneur", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 2160),
				new Effect(TypeEffect.PM, false, 900),
				new Effect(TypeEffect.Atk, false, 1170),
				new Effect(TypeEffect.AtkD, false, 900),
				new Effect(TypeEffect.AtkM, false, 900),
				new Effect(TypeEffect.Toucher, false, 100),
				new Effect(TypeEffect.ESQ, false, 50),
				new Effect(TypeEffect.DefP, false, 540),
				new Effect(TypeEffect.DefM, false, 450),
			}),
			new Archive("Collectionneur - Superstar", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.PV, false, 2592),
				new Effect(TypeEffect.PM, false, 1080),
				new Effect(TypeEffect.Atk, false, 1404),
				new Effect(TypeEffect.AtkD, false, 1080),
				new Effect(TypeEffect.AtkM, false, 1080),
				new Effect(TypeEffect.Toucher, false, 110),
				new Effect(TypeEffect.ESQ, false, 55),
				new Effect(TypeEffect.DefP, false, 648),
				new Effect(TypeEffect.DefM, false, 540),
			}),
			new Archive("Collectionneur - Expert", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3024),
				new Effect(TypeEffect.PM, false, 1260),
				new Effect(TypeEffect.Atk, false, 1638),
				new Effect(TypeEffect.AtkD, false, 1260),
				new Effect(TypeEffect.AtkM, false, 1260),
				new Effect(TypeEffect.Toucher, false, 120),
				new Effect(TypeEffect.ESQ, false, 60),
				new Effect(TypeEffect.DefP, false, 756),
				new Effect(TypeEffect.DefM, false, 630),
			}),
			new Archive("Collectionneur - Talentueux", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3456),
				new Effect(TypeEffect.PM, false, 1440),
				new Effect(TypeEffect.Atk, false, 1872),
				new Effect(TypeEffect.AtkD, false, 1440),
				new Effect(TypeEffect.AtkM, false, 1440),
				new Effect(TypeEffect.Toucher, false, 130),
				new Effect(TypeEffect.ESQ, false, 65),
				new Effect(TypeEffect.DefP, false, 864),
				new Effect(TypeEffect.DefM, false, 720),
			}),
			new Archive("Collectionneur - Chef", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.PV, false, 3888),
				new Effect(TypeEffect.PM, false, 1620),
				new Effect(TypeEffect.Atk, false, 2106),
				new Effect(TypeEffect.AtkD, false, 1620),
				new Effect(TypeEffect.AtkM, false, 1620),
				new Effect(TypeEffect.Toucher, false, 140),
				new Effect(TypeEffect.ESQ, false, 70),
				new Effect(TypeEffect.DefP, false, 972),
				new Effect(TypeEffect.DefM, false, 810),
			}),
			new Archive("Collectionneur - Maître", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.PV, false, 4320),
				new Effect(TypeEffect.PM, false, 1800),
				new Effect(TypeEffect.Atk, false, 2340),
				new Effect(TypeEffect.AtkD, false, 1800),
				new Effect(TypeEffect.AtkM, false, 1800),
				new Effect(TypeEffect.Toucher, false, 150),
				new Effect(TypeEffect.ESQ, false, 75),
				new Effect(TypeEffect.DefP, false, 1080),
				new Effect(TypeEffect.DefM, false, 900),
			}),
			new Archive("Blogueur novice", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.TCCP, false, 8),
				new Effect(TypeEffect.TCCM, false, 8),
			}),
			new Archive("Blogueur amateur", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.TCCP, false, 16),
				new Effect(TypeEffect.TCCM, false, 16),
			}),
			new Archive("Blogueur intermédiaire", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.TCCP, false, 20),
				new Effect(TypeEffect.TCCM, false, 20),
				new Effect(TypeEffect.RTCCP, false, 5),
				new Effect(TypeEffect.RTCCM, false, 5),
			}),
			new Archive("Blogueur confirmé", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.TCCP, false, 24),
				new Effect(TypeEffect.TCCM, false, 24),
				new Effect(TypeEffect.RTCCP, false, 10),
				new Effect(TypeEffect.RTCCM, false, 10),
			}),
			new Archive("Critique culinaire - Apprenti", Quality.WHITE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 2),
				new Effect(TypeEffect.DCCM, false, 2),
			}),
			new Archive("Critique culinaire - Débutant", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 4),
				new Effect(TypeEffect.DCCM, false, 4),
			}),
			new Archive("Critique culinaire - Avancé", Quality.GREEN, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 6),
				new Effect(TypeEffect.DCCM, false, 6),
			}),
			new Archive("Critique culinaire - Professionnel", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 8),
				new Effect(TypeEffect.DCCM, false, 8),
			}),
			new Archive("Gourmand", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 10),
				new Effect(TypeEffect.DCCM, false, 10),
			}),
			new Archive("Gourmand - Superstar", Quality.BLUE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 10),
				new Effect(TypeEffect.DCCM, false, 10),
				new Effect(TypeEffect.RDCCP, false, 2),
				new Effect(TypeEffect.RDCCM, false, 2),
			}),
			new Archive("Gourmand - Expert", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 11),
				new Effect(TypeEffect.DCCM, false, 11),
				new Effect(TypeEffect.RDCCP, false, 3),
				new Effect(TypeEffect.RDCCM, false, 3),
			}),
			new Archive("Gourmand - Talentueux", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 12),
				new Effect(TypeEffect.DCCM, false, 12),
				new Effect(TypeEffect.RDCCP, false, 5),
				new Effect(TypeEffect.RDCCM, false, 5),
			}),
			new Archive("Gourmand - Chef", Quality.ORANGE, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 13),
				new Effect(TypeEffect.DCCM, false, 13),
				new Effect(TypeEffect.RDCCP, false, 6),
				new Effect(TypeEffect.RDCCM, false, 6),
			}),
			new Archive("Gourmand - Maître", Quality.GOLD, new Effect[] {
				new Effect(TypeEffect.DCCP, false, 14),
				new Effect(TypeEffect.DCCM, false, 14),
				new Effect(TypeEffect.RDCCP, false, 7),
				new Effect(TypeEffect.RDCCM, false, 7),
			}),
		};
	}
	
	public static Weapon[][] getWeapon() {
		return new Weapon[][] {
			LoaderWeapon.getEp1M(),
			LoaderWeapon.getMa1M(),
			LoaderWeapon.getHa1M(),
			LoaderWeapon.getEp2M(),
			LoaderWeapon.getMa2M(),
			LoaderWeapon.getHa2M(),
			LoaderWeapon.getMeca1M(),
			LoaderWeapon.getMeca2M(),
			LoaderWeapon.getArc(),
			LoaderWeapon.getGun(),
			LoaderWeapon.getCanon(),
			LoaderWeapon.getRel(),
			LoaderWeapon.getBaton(),
			LoaderWeapon.getLame(),
			LoaderWeapon.getCle(),
			LoaderWeapon.getBouclier(),
			LoaderWeapon.getDefault(),
		};
	}
	
	public static Armor[][] getArmor() {
		return new Armor[][] {
			LoaderHelmet.getHelmet(),
			LoaderBreastplate.getBreastplate(),
			LoaderLegging.getLegging(),
			LoaderGauntlet.getGauntlet(),
			LoaderBoot.getBoot()
		};
	}

	public static EquipSet[] getArmorSet() {
		return LoaderEquipSet.getArmor();
	}

	public static EquipSet[] getCapeRingSet() {
		return LoaderEquipSet.getCapeRing();
	}
	
	public static Cape[] getCape() {
		return LoaderCape.getCape();
	}
	
	public static Ring[] getRing() {
		return LoaderRing.getRing();
	}
	
	public static Bullet[] getBullet() {
		return new Bullet[] {
			new Bullet("Balles Incandescentes", 80, Quality.BLUE, false, "80balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 97),
				new Effect(TypeEffect.VitAtk, false, 6),
			}),
			new Bullet("Canon des Ombres", 80, Quality.BLUE, false, "80obus0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 97),
				new Effect(TypeEffect.PeneP, false, 2),
				new Effect(TypeEffect.PeneM, false, 2),
			}),
			new Bullet("Flèche d'Obsidienne", 80, Quality.BLUE, false, "80fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 80),
				new Effect(TypeEffect.Toucher, false, 4),
			}),
			new Bullet("Balles de Cuivre", 70, Quality.BLUE, false, "70balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 97),
				new Effect(TypeEffect.VitAtk, false, 3),
			}),
			new Bullet("Canon des Ombres", 70, Quality.BLUE, false, "70obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 88),
				new Effect(TypeEffect.PeneP, false, 1),
				new Effect(TypeEffect.PeneM, false, 1),
			}),
			new Bullet("Flèche de Mithril", 70, Quality.BLUE, false, "70fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 73),
				new Effect(TypeEffect.Toucher, false, 2),
			}),
			new Bullet("Balle du Trou Noir", 96, Quality.GREEN, false, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 96),
			}),
			new Bullet("Flèche Interdimensionnelle", 96, Quality.GREEN, false, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 79),
			}),
			new Bullet("Obus des Étoiles", 96, Quality.GREEN, false, "96obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 96),
			}),
			new Bullet("Balle Sableuse", 91, Quality.GREEN, false, "70balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 91),
			}),
			new Bullet("Flèche d'Étoile", 91, Quality.GREEN, false, "80fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 76),
			}),
			new Bullet("Obus de l'Esprit ouvert", 91, Quality.GREEN, false, "80obus0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 91),
			}),
			new Bullet("Carquois de Chasse à l'Ours", 70, Quality.GREEN, false, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 62),
			}),
			new Bullet("Cartouches Dum-Dum", 70, Quality.GREEN, false, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 76),
			}),
			new Bullet("Obus de Mise à feu", 70, Quality.GREEN, false, "70obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 75),
			}),
			new Bullet("Balles de Platine", 60, Quality.GREEN, false, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 67),
			}),
			new Bullet("Flèches Météores", 60, Quality.GREEN, false, "80fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 56),
			}),
			new Bullet("Obus soniques", 60, Quality.GREEN, false, "96obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 67),
			}),
			new Bullet("Flèches du Sceau", 50, Quality.GREEN, false, "80fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 49),
			}),
			new Bullet("Munitions Ensorcelées", 50, Quality.GREEN, false, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 60),
			}),
			new Bullet("Obus glaçant", 50, Quality.GREEN, false, "80obus0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 60),
			}),
			new Bullet("Flèches Filantes", 40, Quality.GREEN, false, "40fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 43),
			}),
			new Bullet("Munitions Explosives", 40, Quality.GREEN, false, "40balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 52),
			}),
			new Bullet("Obus équilibrés", 40, Quality.GREEN, false, "40obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 51),
			}),
			new Bullet("Cartouches Supersoniques", 30, Quality.GREEN, false, "70balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 43),
			}),
			new Bullet("Flèches Acérées", 30, Quality.GREEN, false, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 36),
			}),
			new Bullet("Projectiles craquelant", 30, Quality.GREEN, false, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 43),
			}),
			new Bullet("Balles d'Acier", 20, Quality.GREEN, false, "20balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 35),
			}),
			new Bullet("Flèches de Fer Empennées", 20, Quality.GREEN, false, "20fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 29),
			}),
			new Bullet("Obus à rafale", 20, Quality.GREEN, false, "20obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 34),
			}),
			new Bullet("Canon en étain", 10, Quality.GREEN, false, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 25),
			}),
			new Bullet("Flèches Tranchantes", 10, Quality.GREEN, false, "70fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 22),
			}),
			new Bullet("Projectiles Métalliques", 10, Quality.GREEN, false, "10balle0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 25),
			}),
			new Bullet("Balle Gelée +", 90, Quality.WHITE, true, "40balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 86),
			}),
			new Bullet("Balle Gelée", 90, Quality.WHITE, false, "40balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 76),
			}),
			new Bullet("Flèche du clair de lune +", 90, Quality.WHITE, true, "40fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 72),
			}),
			new Bullet("Flèche du Clair de Lune", 90, Quality.WHITE, false, "40fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 62),
			}),
			new Bullet("Obus de Clair de Lune +", 90, Quality.WHITE, true, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 86),
			}),
			new Bullet("Obus de Clair de Lune", 90, Quality.WHITE, false, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 76),
			}),
			new Bullet("Balles Astrales +", 85, Quality.WHITE, true, "20balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 83),
			}),
			new Bullet("Balles Astrales", 85, Quality.WHITE, false, "20balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 73),
			}),
			new Bullet("Flèches brutales +", 85, Quality.WHITE, true, "20fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 70),
			}),
			new Bullet("Flèches Brutales", 85, Quality.WHITE, false, "20fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 60),
			}),
			new Bullet("Obus d'Âme brisée", 85, Quality.WHITE, false, "85obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 73),
			}),
			new Bullet("Obus de Frappe des âmes +", 85, Quality.WHITE, true, "40obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 83),
			}),
			new Bullet("Obus de Frappe des âmes", 85, Quality.WHITE, false, "40obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 73),
			}),
			new Bullet("Balles Fusantes +", 80, Quality.WHITE, true, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 79),
			}),
			new Bullet("Balles Fusantes", 80, Quality.WHITE, false, "96balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 69),
			}),
			new Bullet("Flèches tueuses +", 80, Quality.WHITE, true, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 67),
			}),
			new Bullet("Flèches Tueuses", 80, Quality.WHITE, false, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 57),
			}),
			new Bullet("Obus d'Acier brûlant +", 80, Quality.WHITE, true, "80obus1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 79),
			}),
			new Bullet("Obus d'Acier brûlant", 80, Quality.WHITE, false, "80obus1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 69),
			}),
			new Bullet("Cartouches Brise-Armures +", 50, Quality.WHITE, true, "40balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 60),
			}),
			new Bullet("Cartouches Brise-Armures", 50, Quality.WHITE, false, "40balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 50),
			}),
			new Bullet("Flèches foudroyantes +", 50, Quality.WHITE, true, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 51),
			}),
			new Bullet("Flèches Foudroyantes", 50, Quality.WHITE, false, "96fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 41),
			}),
			new Bullet("Obus de Vent perçant +", 50, Quality.WHITE, true, "96obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 60),
			}),
			new Bullet("Obus de Vent perçant", 50, Quality.WHITE, false, "96obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 50),
			}),
			new Bullet("Balles Traçantes +", 40, Quality.WHITE, true, "70balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 53),
			}),
			new Bullet("Balles Traçantes", 40, Quality.WHITE, false, "70balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 43),
			}),
			new Bullet("Flèches furtives +", 40, Quality.WHITE, true, "40fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 46),
			}),
			new Bullet("Flèches furtives", 40, Quality.WHITE, false, "40fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 36),
			}),
			new Bullet("Obus à fragmentation +", 40, Quality.WHITE, true, "85obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 53),
			}),
			new Bullet("Obus à fragmentation", 40, Quality.WHITE, false, "85obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 43),
			}),
			new Bullet("Balles d'Acier +", 30, Quality.WHITE, true, "20balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 46),
			}),
			new Bullet("Balles d'Acier", 30, Quality.WHITE, false, "20balle", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 36),
			}),
			new Bullet("Flèches affinées +", 30, Quality.WHITE, true, "20fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 40),
			}),
			new Bullet("Flèches affinées", 30, Quality.WHITE, false, "20fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 30),
			}),
			new Bullet("Obus tranchant +", 30, Quality.WHITE, true, "20obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 46),
			}),
			new Bullet("Obus tranchant", 30, Quality.WHITE, false, "20obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 36),
			}),
			new Bullet("Balles de Fer +", 20, Quality.WHITE, true, "10balle0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 39),
			}),
			new Bullet("Balles de Fer", 20, Quality.WHITE, false, "10balle0", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 29),
			}),
			new Bullet("Flèches robustes +", 20, Quality.WHITE, true, "70fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 34),
			}),
			new Bullet("Flèches robustes", 20, Quality.WHITE, false, "70fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 24),
			}),
			new Bullet("Obus en acier moulé +", 20, Quality.WHITE, true, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 39),
			}),
			new Bullet("Obus en acier moulé", 20, Quality.WHITE, false, "30obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 29),
			}),
			new Bullet("Balles Grossières +", 10, Quality.WHITE, true, "10balle1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 31),
			}),
			new Bullet("Balles Grossières", 10, Quality.WHITE, false, "10balle1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 21),
			}),
			new Bullet("Flèches de fer +", 10, Quality.WHITE, true, "10fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 28),
			}),
			new Bullet("Flèches de Fer", 10, Quality.WHITE, false, "10fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 18),
			}),
			new Bullet("Obus de précision +", 10, Quality.WHITE, true, "40obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 31),
			}),
			new Bullet("Obus de précision", 10, Quality.WHITE, false, "40obus", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 21),
			}),
			new Bullet("Canon pratique", 8, Quality.WHITE, false, "80obus1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 20),
			}),
			new Bullet("Projectile Simple +", 8, Quality.WHITE, true, "10balle1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 30),
			}),
			new Bullet("Projectile Simple", 8, Quality.WHITE, false, "10balle1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 20),
			}),
			new Bullet("Flèches renforcées +", 6, Quality.WHITE, true, "10fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 25),
			}),
			new Bullet("Flèches renforcées", 6, Quality.WHITE, false, "10fleche", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 15),
			}),
			new Bullet("Obus économique +", 6, Quality.WHITE, true, "80obus1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 30),
			}),
			new Bullet("Obus économique", 6, Quality.WHITE, false, "80obus1", new Effect[] {
				new Effect(TypeEffect.Bullet, false, 20),
			}),
		};
	}
	
	public static Fortification[] getFortification() {
		return new Fortification[] {
			new Fortification("+0", Fortification.LEVEL[0], 1),
			new Fortification("+1", Fortification.LEVEL[1], 1.03),
			new Fortification("+2", Fortification.LEVEL[1], 1.06),
			new Fortification("+3", Fortification.LEVEL[1], 1.09),
			new Fortification("+4", Fortification.LEVEL[1], 1.12),
			new Fortification("+5", Fortification.LEVEL[1], 1.15),
			new Fortification("+6", Fortification.LEVEL[1], 1.18),
			new Fortification("+7", Fortification.LEVEL[1], 1.21),
			new Fortification("+8", Fortification.LEVEL[2], 1.24),
			new Fortification("+9", Fortification.LEVEL[2], 1.27),
			new Fortification("+10", Fortification.LEVEL[2], 1.31),
			new Fortification("+11", Fortification.LEVEL[3], 1.35),
			new Fortification("+12", Fortification.LEVEL[3], 1.39),
			new Fortification("+13", Fortification.LEVEL[3], 1.45),
			new Fortification("+14", Fortification.LEVEL[2], 1.51),
			new Fortification("+15", Fortification.LEVEL[2], 1.61),
			new Fortification("+16", Fortification.LEVEL[4], 1.67),
			new Fortification("+17", Fortification.LEVEL[4], 1.73),
			new Fortification("+18", Fortification.LEVEL[4], 1.83),
			new Fortification("+19", Fortification.LEVEL[3], 1.88),
			new Fortification("+20", Fortification.LEVEL[3], 1.98)
		};
	}
	
	public static RedFortification[] getRedFortification() {
		return new RedFortification[] {
			new RedFortification("+0", RedFortification.LEVEL[0], 1, 1, 1, 0),
			new RedFortification("+1", RedFortification.LEVEL[1], 1.015, 1.01, 1.02, 0),
			new RedFortification("+2", RedFortification.LEVEL[1], 1.03, 1.02, 1.04, 0),
			new RedFortification("+3", RedFortification.LEVEL[1], 1.045, 1.03, 1.06, 0),
			new RedFortification("+4", RedFortification.LEVEL[1], 1.06, 1.04, 1.08, 0),
			new RedFortification("+5", RedFortification.LEVEL[1], 1.075, 1.05, 1.1, 0),
			new RedFortification("+6", RedFortification.LEVEL[1], 1.09, 1.06, 1.12, 0),
			new RedFortification("+7", RedFortification.LEVEL[1], 1.105, 1.07, 1.14, 0),
			new RedFortification("+8", RedFortification.LEVEL[1], 1.12, 1.08, 1.16, 0),
			new RedFortification("+9", RedFortification.LEVEL[1], 1.135, 1.09, 1.18, 0),
			new RedFortification("+10", RedFortification.LEVEL[1], 1.15, 1.10, 1.2, 1),
			new RedFortification("+11", RedFortification.LEVEL[2], 1.175, 1.12, 1.23, 1),
			new RedFortification("+12", RedFortification.LEVEL[2], 1.2, 1.14, 1.26, 1),
			new RedFortification("+13", RedFortification.LEVEL[2], 1.225, 1.16, 1.29, 1),
			new RedFortification("+14", RedFortification.LEVEL[2], 1.25, 1.18, 1.32, 1),
			new RedFortification("+15", RedFortification.LEVEL[2], 1.275, 1.2, 1.35, 1),
			new RedFortification("+16", RedFortification.LEVEL[2], 1.3, 1.22, 1.38, 1),
			new RedFortification("+17", RedFortification.LEVEL[2], 1.325, 1.24, 1.41, 1),
			new RedFortification("+18", RedFortification.LEVEL[2], 1.35, 1.26, 1.44, 1),
			new RedFortification("+19", RedFortification.LEVEL[2], 1.375, 1.28, 1.47, 1),
			new RedFortification("+20", RedFortification.LEVEL[3], 1.4, 1.3, 1.5, 2),
			new RedFortification("+21", RedFortification.LEVEL[3], 1.435, 1.33, 1.54, 2),
			new RedFortification("+22", RedFortification.LEVEL[3], 1.47, 1.36, 1.58, 2),
			new RedFortification("+23", RedFortification.LEVEL[3], 1.505, 1.39, 1.62, 2),
			new RedFortification("+24", RedFortification.LEVEL[3], 1.54, 1.42, 1.66, 2),
			new RedFortification("+25", RedFortification.LEVEL[3], 1.575, 1.45, 1.7, 2),
			new RedFortification("+26", RedFortification.LEVEL[3], 1.61, 1.48, 1.74, 2),
			new RedFortification("+27", RedFortification.LEVEL[3], 1.645, 1.51, 1.78, 2),
			new RedFortification("+28", RedFortification.LEVEL[3], 1.68, 1.54, 1.82, 2),
			new RedFortification("+29", RedFortification.LEVEL[3], 1.715, 1.57, 1.86, 2),
			new RedFortification("+30", RedFortification.LEVEL[3], 1.75, 1.6, 1.9, 3),
			new RedFortification("+31", RedFortification.LEVEL[4], 1.8, 1.64, 1.96, 3),
			new RedFortification("+32", RedFortification.LEVEL[4], 1.85, 1.68, 2.02, 3),
			new RedFortification("+33", RedFortification.LEVEL[4], 1.9, 1.72, 2.08, 3),
			new RedFortification("+34", RedFortification.LEVEL[4], 1.95, 1.76, 2.14, 3),
			new RedFortification("+35", RedFortification.LEVEL[4], 2, 1.80, 2.2, 3),
			new RedFortification("+36", RedFortification.LEVEL[4], 2.05, 1.84, 2.26, 3),
			new RedFortification("+37", RedFortification.LEVEL[4], 2.1, 1.88, 2.32, 3),
			new RedFortification("+38", RedFortification.LEVEL[4], 2.15, 1.92, 2.38, 3),
			new RedFortification("+39", RedFortification.LEVEL[4], 2.2, 1.96, 2.44, 3),
			new RedFortification("+40", RedFortification.LEVEL[4], 2.25, 2, 2.5, 4),
			new RedFortification("+41", RedFortification.LEVEL[5], 2.315, 2.05, 2.58, 4),
			new RedFortification("+42", RedFortification.LEVEL[5], 2.38, 2.1, 2.66, 4),
			new RedFortification("+43", RedFortification.LEVEL[5], 2.45, 2.15, 2.75, 4),
			new RedFortification("+44", RedFortification.LEVEL[5], 2.52, 2.2, 2.84, 4),
			new RedFortification("+45", RedFortification.LEVEL[5], 2.595, 2.25, 2.94, 4),
			new RedFortification("+46", RedFortification.LEVEL[5], 2.67, 2.3, 3.04, 4),
			new RedFortification("+47", RedFortification.LEVEL[5], 2.75, 2.35, 3.15, 4),
			new RedFortification("+48", RedFortification.LEVEL[5], 2.83, 2.4, 3.26, 4),
			new RedFortification("+49", RedFortification.LEVEL[5], 2.915, 2.45, 3.38, 4),
			new RedFortification("+50", RedFortification.LEVEL[5], 3, 2.5, 3.5, 5),
		};
	}
	
	public static Pearl[] getWeaponPearl() {
		return LoaderPearl.getWeapon();
	}
	
	public static Pearl[] getArmorPearl() {
		return LoaderPearl.getArmor();
	}
	
	public static Pearl[] getWeaponCostPearl() {
		return LoaderPearl.getWeaponCost();
	}
	
	public static Pearl[] getArmorCostPearl() {
		return LoaderPearl.getArmorCost();
	}
	
	public static Talent[][] getTalent() {
		return new Talent[][] {
			LoaderTalent.getClass0(),
			LoaderTalent.getClass1(),
			LoaderTalent.getClass2(),
			LoaderTalent.getClass3(),
			LoaderTalent.getClass4(),
			LoaderTalent.getClass5(),
			LoaderTalent.getClass6(),
			LoaderTalent.getClass7(),
			LoaderTalent.getClass8(),
			LoaderTalent.getClass9(),
			LoaderTalent.getClass10(),
			LoaderTalent.getClass11(),
		};
	}
	
	public static CombiTalent[][] getCombiTalent() {
		return new CombiTalent[][] {
			LoaderCombiTalent.getClass0(),
			LoaderCombiTalent.getClass1(),
			LoaderCombiTalent.getClass2(),
			LoaderCombiTalent.getClass3(),
			LoaderCombiTalent.getClass4(),
			LoaderCombiTalent.getClass5(),
			LoaderCombiTalent.getClass6(),
			LoaderCombiTalent.getClass7(),
			LoaderCombiTalent.getClass8(),
			LoaderCombiTalent.getClass9(),
			LoaderCombiTalent.getClass10(),
			LoaderCombiTalent.getClass11(),
		};
	}
	
	public static Speciality[][] getSpeciality() {
		return new Speciality[][] {
			LoaderSpeciality.getClass0(),
			LoaderSpeciality.getClass1(),
			LoaderSpeciality.getClass2(),
			LoaderSpeciality.getClass3(),
			LoaderSpeciality.getClass4(),
			LoaderSpeciality.getClass5(),
			LoaderSpeciality.getClass6(),
			LoaderSpeciality.getClass7(),
			LoaderSpeciality.getClass8(),
			LoaderSpeciality.getClass9(),
			LoaderSpeciality.getClass10(),
			LoaderSpeciality.getClass11(),
		};
	}
	
	public static ProSkill[][] getProSkill() {
		return new ProSkill[][] {
			LoaderProSkill.getClass0(),
			LoaderProSkill.getClass1(),
			LoaderProSkill.getClass2(),
			LoaderProSkill.getClass3(),
			LoaderProSkill.getClass4(),
			LoaderProSkill.getClass5(),
			LoaderProSkill.getClass6(),
			LoaderProSkill.getClass7(),
			LoaderProSkill.getClass8(),
			LoaderProSkill.getClass9(),
			LoaderProSkill.getClass10(),
			LoaderProSkill.getClass11(),
		};
	}
	
	public static Runway[] getRunway() {
		return new Runway[] {
			new Runway("Archimage", new Calculable[] {
				new Effect(TypeEffect.INT, false, 7),
				new Effect(TypeEffect.AGI, false, 7),
				new Effect(TypeEffect.Atk, true, 1),
				new Effect(TypeEffect.AtkM, true, 1),
			}),
			new Runway("Aurore", new Calculable[] {
				new Effect(TypeEffect.VitAtk, false, 4),
			}),
			new Runway("Berserker", new Calculable[] {
				new Effect(TypeEffect.FCE, false, 7),
				new Effect(TypeEffect.AGI, false, 7),
				new Effect(TypeEffect.VitAtk, false, 2),
			}),
			new Runway("Bouclier", new Calculable[] {
				new Effect(TypeEffect.PV, true, 2),
				new Effect(TypeEffect.PM, true, 2),
				new Effect(TypeEffect.ReducP, false, 3),
				new Effect(TypeEffect.ReducM, false, 3),
				new Proc(0, Activation.Attacked, new Calculable[] {
					new Effect(TypeEffect.ReflectP, false, 100),
					new Effect(TypeEffect.ReflectM, false, 100),
				}),
			}),
			new Runway("Bravoure", new Calculable[] {
				new Effect(TypeEffect.FCE, false, 7),
				new Effect(TypeEffect.VIT, false, 7),
				new Effect(TypeEffect.DefP, true, 2),
			}),
			new Runway("Enchantement", new Calculable[] {
				new Effect(TypeEffect.VIT, false, 7),
				new Effect(TypeEffect.INT, false, 7),
				new Effect(TypeEffect.VitComp, false, 2),
			}),
			new Runway("Gardien", new Calculable[] {
				new Effect(TypeEffect.ReducP, false, 3),
			}),
			new Runway("Hymne", new Calculable[] {
				new Effect(TypeEffect.VitComp, false, 4),
			}),
			new Runway("Illusion", new Calculable[] {
				new Effect(TypeEffect.VitAtk, false, 3),
				new Effect(TypeEffect.VitComp, false, 3),
			}),
			new Runway("Lutte", new Calculable[] {
				new StaticEffect(TypeStaticEffect.x2STD, 5),
			}),
			new Runway("Malédiction", new Calculable[] {
				new StaticEffect(TypeStaticEffect.x2Skill, 5),
			}),
			new Runway("Praetor", new Calculable[] {
				new Effect(TypeEffect.FCE, false, 6),
				new Effect(TypeEffect.VIT, false, 6),
				new Effect(TypeEffect.INT, false, 6),
				new Effect(TypeEffect.VOL, false, 6),
				new Effect(TypeEffect.AGI, false, 6),
				new Effect(TypeEffect.DefP, true, 3),
				new Effect(TypeEffect.DefM, true, 3),
			}),
			new Runway("Prêtre", new Calculable[] {
				new Effect(TypeEffect.ReducM, false, 3),
			}),
			new Runway("Ranger", new Calculable[] {
				new Effect(TypeEffect.Depla, false, 5),
				new Effect(TypeEffect.ESQ, false, 3),
				new Effect(TypeEffect.Toucher, false, 3),
			}),
			new Runway("Rapidité", new Calculable[] {
				new Effect(TypeEffect.Toucher, false, 5),
			}),
			new Runway("Sagesse", new Calculable[] {
				new Effect(TypeEffect.INT, false, 7),
				new Effect(TypeEffect.VOL, false, 7),
				new Effect(TypeEffect.AtkM, true, 2),
			}),
			new Runway("Sorcier", new Calculable[] {
				new Effect(TypeEffect.DegM, false, 3),
			}),
			new Runway("Synthétisation", new Calculable[] {
				new Effect(TypeEffect.BoostCraft, false, 2),
				new Effect(TypeEffect.RTCCP, false, 4),
				new Effect(TypeEffect.RTCCM, false, 4),
				new Effect(TypeEffect.RDCCP, false, 8),
				new Effect(TypeEffect.RDCCM, false, 8),
			}),
			new Runway("Turbo", new Calculable[] {
				new Effect(TypeEffect.Depla, false, 2),
				new Effect(TypeEffect.VitAtk, false, 2),
				new Effect(TypeEffect.VitComp, false, 2),
			}),
		};
	}
	
	public static Bague[] getBague() {
		return new Bague[] {
			new Bague(new HashMap<Language, String>() {{ put(Language.FR, "Aucun"); put(Language.EN, "None"); }}, Quality.GREY, "null", null),
			new Bague(new HashMap<Language, String>() {{ put(Language.FR, "Bague Magique"); put(Language.EN, "Magical Passion Ring"); }}, Quality.BLUE, "blue", new Effect[] {
				new Effect(TypeEffect.FCE, false, 3, true),
				new Effect(TypeEffect.VIT, false, 3, true),
				new Effect(TypeEffect.INT, false, 3, true),
				new Effect(TypeEffect.VOL, false, 3, true),
				new Effect(TypeEffect.AGI, false, 3, true),
				new Effect(TypeEffect.Atk, false, 10, true),
				new Effect(TypeEffect.AtkD, false, 10, true),
				new Effect(TypeEffect.AtkM, false, 10, true),
			}),
			new Bague(new HashMap<Language, String>() {{ put(Language.FR, "Bague Magique 5 carats"); put(Language.EN, "5-Carat Magical Passion Ring"); }}, Quality.GOLD, "gold", new Effect[] {
				new Effect(TypeEffect.FCE, false, 10, true),
				new Effect(TypeEffect.VIT, false, 10, true),
				new Effect(TypeEffect.INT, false, 10, true),
				new Effect(TypeEffect.VOL, false, 10, true),
				new Effect(TypeEffect.AGI, false, 10, true),
				new Effect(TypeEffect.Atk, false, 20, true),
				new Effect(TypeEffect.AtkD, false, 20, true),
				new Effect(TypeEffect.AtkM, false, 20, true),
			}),
		};
	}
	
	public static Anima[] getAnima() {
		return LoaderAnima.getAnima();
	}
	
	public static Nucleus[][] getNucleus() {
		return new Nucleus[][] {
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +4%", Quality.GREEN, "FCEgreen", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 4),
				}),
				new Nucleus("VIT +2%", Quality.GREEN, "VITgreen", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 2),
				}),
				new Nucleus("INT +4%", Quality.GREEN, "INTgreen", new Calculable[] {
					new Effect(TypeEffect.INT, true, 4),
				}),
				new Nucleus("VOL +2%", Quality.GREEN, "VOLgreen", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 2),
				}),
				new Nucleus("AGI +4%", Quality.GREEN, "AGIgreen", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 4),
				}),
			},
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +5%", Quality.BLUE, "FCEblue", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 5),
				}),
				new Nucleus("VIT +3%", Quality.BLUE, "VITblue", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 3),
				}),
				new Nucleus("INT +5%", Quality.BLUE, "INTblue", new Calculable[] {
					new Effect(TypeEffect.INT, true, 5),
				}),
				new Nucleus("VOL +3%", Quality.BLUE, "VOLblue", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 3),
				}),
				new Nucleus("AGI +5%", Quality.BLUE, "AGIblue", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 5),
				}),
			},
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +6%", Quality.BLUE, "FCEblue", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 6),
				}),
				new Nucleus("VIT +4%", Quality.BLUE, "VITblue", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 4),
				}),
				new Nucleus("INT +6%", Quality.BLUE, "INTblue", new Calculable[] {
					new Effect(TypeEffect.INT, true, 6),
				}),
				new Nucleus("VOL +4%", Quality.BLUE, "VOLblue", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 4),
				}),
				new Nucleus("AGI +6%", Quality.BLUE, "AGIblue", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 6),
				}),
			},
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +8%", Quality.ORANGE, "FCEorange", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 8),
				}),
				new Nucleus("VIT +6%", Quality.ORANGE, "VITorange", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 6),
				}),
				new Nucleus("INT +8%", Quality.ORANGE, "INTorange", new Calculable[] {
					new Effect(TypeEffect.INT, true, 8),
				}),
				new Nucleus("VOL +6%", Quality.ORANGE, "VOLorange", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 6),
				}),
				new Nucleus("AGI +8%", Quality.ORANGE, "AGIorange", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 8),
				}),
				new Nucleus("FCE +8% - Réduc", Quality.ORANGE, "FCEorange", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 8),
					new Proc(20, Activation.Attacked, 3, new Calculable[] {
						new Effect(TypeEffect.ReducP, false, 6),
						new Effect(TypeEffect.ReducM, false, 6),
					}),
				}),
				new Nucleus("VIT +6% - Réduc", Quality.ORANGE, "VITorange", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 6),
					new Proc(20, Activation.Attacked, 3, new Calculable[] {
						new Effect(TypeEffect.ReducP, false, 6),
						new Effect(TypeEffect.ReducM, false, 6),
					}),
				}),
				new Nucleus("INT +8% - Réduc", Quality.ORANGE, "INTorange", new Calculable[] {
					new Effect(TypeEffect.INT, true, 8),
					new Proc(20, Activation.Attacked, 3, new Calculable[] {
						new Effect(TypeEffect.ReducP, false, 6),
						new Effect(TypeEffect.ReducM, false, 6),
					}),
				}),
				new Nucleus("VOL +6% - Réduc", Quality.ORANGE, "VOLorange", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 6),
					new Proc(20, Activation.Attacked, 3, new Calculable[] {
						new Effect(TypeEffect.ReducP, false, 6),
						new Effect(TypeEffect.ReducM, false, 6),
					}),
				}),
				new Nucleus("AGI +8% - Réduc", Quality.ORANGE, "AGIorange", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 8),
					new Proc(20, Activation.Attacked, 3, new Calculable[] {
						new Effect(TypeEffect.ReducP, false, 6),
						new Effect(TypeEffect.ReducM, false, 6),
					}),
				}),
			},
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +10%", Quality.GOLD, "FCEgold", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 10),
				}),
				new Nucleus("VIT +8%", Quality.GOLD, "VITgold", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 8),
				}),
				new Nucleus("INT +10%", Quality.GOLD, "INTgold", new Calculable[] {
					new Effect(TypeEffect.INT, true, 10),
				}),
				new Nucleus("VOL +8%", Quality.GOLD, "VOLgold", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 8),
				}),
				new Nucleus("AGI +10%", Quality.GOLD, "AGIgold", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 10),
				}),
				new Nucleus("FCE +10% - Depla +5%", Quality.GOLD, "FCEgold", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 10),
					new Effect(TypeEffect.Depla, false, 5),
				}),
				new Nucleus("VIT +8% - Depla +5%", Quality.GOLD, "VITgold", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 8),
					new Effect(TypeEffect.Depla, false, 5),
				}),
				new Nucleus("INT +10% - Depla +5%", Quality.GOLD, "INTgold", new Calculable[] {
					new Effect(TypeEffect.INT, true, 10),
					new Effect(TypeEffect.Depla, false, 5),
				}),
				new Nucleus("VOL +8% - Depla +5%", Quality.GOLD, "VOLgold", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 8),
					new Effect(TypeEffect.Depla, false, 5),
				}),
				new Nucleus("AGI +10% - Depla +5%", Quality.GOLD, "AGIgold", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 10),
					new Effect(TypeEffect.Depla, false, 5),
				}),
				new Nucleus("FCE +10% - Depla +10%", Quality.GOLD, "FCEgold", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 10),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("VIT +8% - Depla +10%", Quality.GOLD, "VITgold", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 8),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("INT +10% - Depla +10%", Quality.GOLD, "INTgold", new Calculable[] {
					new Effect(TypeEffect.INT, true, 10),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("VOL +8% - Depla +10%", Quality.GOLD, "VOLgold", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 8),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("AGI +10% - Depla +10%", Quality.GOLD, "AGIgold", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 10),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("FCE +10% - Depla +15%", Quality.GOLD, "FCEgold", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 10),
					new Effect(TypeEffect.Depla, false, 15),
				}),
				new Nucleus("VIT +8% - Depla +15%", Quality.GOLD, "VITgold", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 8),
					new Effect(TypeEffect.Depla, false, 15),
				}),
				new Nucleus("INT +10% - Depla +15%", Quality.GOLD, "INTgold", new Calculable[] {
					new Effect(TypeEffect.INT, true, 10),
					new Effect(TypeEffect.Depla, false, 15),
				}),
				new Nucleus("VOL +8% - Depla +15%", Quality.GOLD, "VOLgold", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 8),
					new Effect(TypeEffect.Depla, false, 15),
				}),
				new Nucleus("AGI +10% - Depla +15%", Quality.GOLD, "AGIgold", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 10),
					new Effect(TypeEffect.Depla, false, 15),
				}),
			},
			new Nucleus[] {
				new Nucleus("Aucun", Quality.GREY, "null", null),
				new Nucleus("FCE +12%", Quality.PURPLE, "FCEpurple", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 12),
				}),
				new Nucleus("VIT +10%", Quality.PURPLE, "VITpurple", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 10),
				}),
				new Nucleus("INT +12%", Quality.PURPLE, "INTpurple", new Calculable[] {
					new Effect(TypeEffect.INT, true, 12),
				}),
				new Nucleus("VOL +10%", Quality.PURPLE, "VOLpurple", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 10),
				}),
				new Nucleus("AGI +12%", Quality.PURPLE, "AGIpurple", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 12),
				}),
				new Nucleus("FCE +12% - Depla +10%", Quality.PURPLE, "FCEpurple", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 12),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("VIT +10% - Depla +10%", Quality.PURPLE, "VITpurple", new Calculable[] {
					new Effect(TypeEffect.VIT, true, 10),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("INT +12% - Depla +10%", Quality.PURPLE, "INTpurple", new Calculable[] {
					new Effect(TypeEffect.INT, true, 12),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("VOL +10% - Depla +10%", Quality.PURPLE, "VOLpurple", new Calculable[] {
					new Effect(TypeEffect.VOL, true, 10),
					new Effect(TypeEffect.Depla, false, 10),
				}),
				new Nucleus("AGI +12% - Depla +10%", Quality.PURPLE, "AGIpurple", new Calculable[] {
					new Effect(TypeEffect.AGI, true, 12),
					new Effect(TypeEffect.Depla, false, 10),
				}),
			},
			new Nucleus[] {
				new Nucleus("Doctrines bien-aimées de Werther", Quality.WHITE, "doctrine", new Calculable[] {
					new Effect(TypeEffect.RegenPM, false, 250),
					new Effect(TypeEffect.VitAtk, false, 5),
				}),
				new Nucleus("Griffe de la Brute cristalline magique", Quality.WHITE, "griffe", new Calculable[] {
					new Effect(TypeEffect.DegP, false, 5),
					new Effect(TypeEffect.VitAtk, false, 5),
				}),
				new Nucleus("Pierre de Bénédiction de la Baie Bleue", Quality.GREEN, "blueBay", new Calculable[] {
					new StaticEffect(TypeStaticEffect.x2Skill, 5),
				}),
				new Nucleus("Gri-Gri porte-bonheur pour loterie", Quality.WHITE, "grigri", new Calculable[] {
					new Effect(TypeEffect.Loot, false, 5),
				}),
				new Nucleus("Carte de type bien manchot", Quality.WHITE, "manchot", new Calculable[] {
					new Effect(TypeEffect.Loot, false, 5),
				}),
				new Nucleus("Corne du Roi Triomphant", Quality.WHITE, "corne", new Calculable[] {
					new Effect(TypeEffect.DegP, false, 5),
					new Effect(TypeEffect.DegM, false, 5),
					new Effect(TypeEffect.RegenPV, false, 250),
				}),
				new Nucleus("Pierre d'Invocation de Robolol de Hawk", Quality.WHITE, "robolol", new Calculable[] {
					new Effect(TypeEffect.Toucher, false, 1),
				}),
				new Nucleus("Sac Trésor du Zéphyr", Quality.WHITE, "sac", new Calculable[] {
					new Effect(TypeEffect.Depla, false, 15),
					new Effect(TypeEffect.ESQ, false, 5),
				}),
				new Nucleus("Cristal magique du Chronodériveur", Quality.GREEN, "chrono", new Calculable[] {
					new Effect(TypeEffect.FCE, true, 1),
					new Effect(TypeEffect.VIT, true, 1),
					new Effect(TypeEffect.INT, true, 1),
					new Effect(TypeEffect.VOL, true, 1),
					new Effect(TypeEffect.AGI, true, 1),
				}),
				new Nucleus("Pierre de chance du Mauvais esprit", Quality.WHITE, "esprit", new Calculable[] {
					new Effect(TypeEffect.TCCP, false, 5),
					new Effect(TypeEffect.TCCM, false, 5),
					new Effect(TypeEffect.Toucher, false, 5),
					new Effect(TypeEffect.ESQ, false, 5),
				}),
				new Nucleus("Corne de Bataille de Smulca", Quality.WHITE, "smulca", new Calculable[] {
					new Effect(TypeEffect.DefP, true, 5),
					new Effect(TypeEffect.DefM, true, 5),
					new Effect(TypeEffect.PV, true, 2),
				}),
				new Nucleus("Branche verte", Quality.WHITE, "branche", new Calculable[] {
					new RegenEffect(TypeEffect.PM, true, 1, TypeRegen.REGENERATION, 3),
				}),
				new Nucleus("Serment de 400 ans", Quality.WHITE, "serment", new Calculable[] {
					new Effect(TypeEffect.Depla, false, 40),
					new RegenEffect(TypeEffect.PV, true, -6, TypeRegen.REGENERATION, 1),
				}),
			},
		};
	}

	public static Energy[] getEnergy() {
		return new Energy[] {
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Écarlate"); put(Language.EN, "Crimson"); }}, "red", new Effect[] {
					new Effect(TypeEffect.PV, false, 24),
				}),
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Indigo"); put(Language.EN, "Azure"); }}, "blue", new Effect[] {
					new Effect(TypeEffect.PM, false, 10),
				}),
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Orange"); put(Language.EN, "Citrus"); }}, "orange", new Effect[] {
					new Effect(TypeEffect.Atk, false, 13),
					new Effect(TypeEffect.AtkD, false, 10),
				}),
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Violette"); put(Language.EN, "Violet"); }}, "purple", new Effect[] {
					new Effect(TypeEffect.AtkM, false, 10),
				}),
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Émeraude"); put(Language.EN, "Emerald"); }}, "green", new Effect[] {
					new Effect(TypeEffect.DefP, false, 6),
				}),
				new Energy(new HashMap<Language, String>() {{ put(Language.FR, "Rose"); put(Language.EN, "Peach"); }}, "pink", new Effect[] {
					new Effect(TypeEffect.DefM, false, 5),
				}),
		};
	}
}
